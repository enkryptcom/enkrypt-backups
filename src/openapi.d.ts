/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/get": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["GetRoot"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/health": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["GetHealth"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/version": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["GetVersion"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/schema": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["GetSchema"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/backups/{publicKey}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["GetUserBackups"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/backups/{publicKey}/{userId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["PostUserBackup"];
        delete: operations["DeleteUserBackup"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        ByteString: string;
        Bytes32: string;
        Bytes64: string;
        Hex: string;
        UUID: string;
        PublicKey: components["schemas"]["Bytes64"];
        UserId: components["schemas"]["UUID"];
        GetRootResponse: {
            message: string;
        };
        GetHealthResponse: {
            message: string;
        };
        GetVersionResponse: {
            version: string;
        };
        GetSchemaResponse: string;
        PostUserBackupRequest: {
            signature: components["schemas"]["ByteString"];
            payload: components["schemas"]["ByteString"];
        };
        PostUserBackupResponse: {
            message: string;
        };
        DeleteUserBackupResponse: {
            message: string;
        };
        GetUserBackupsResponse: {
            backups: components["schemas"]["Backup"][];
        };
        Backup: {
            /** Format: date-time */
            updatedAt: string;
            userId: string;
            payload: components["schemas"]["ByteString"];
        };
    };
    responses: {
        GetRootSuccess: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["GetRootResponse"];
            };
        };
        GetHealthSuccess: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["GetHealthResponse"];
            };
        };
        GetVersionSuccess: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["GetVersionResponse"];
            };
        };
        GetSchemaSuccess: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/yaml": components["schemas"]["GetSchemaResponse"];
            };
        };
        GetUserBackupsSuccess: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["GetUserBackupsResponse"];
            };
        };
        PostUserBackupSuccess: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["PostUserBackupResponse"];
            };
        };
        DeleteUserBackupSuccess: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["DeleteUserBackupResponse"];
            };
        };
    };
    parameters: {
        PublicKey: components["schemas"]["PublicKey"];
        UserId: components["schemas"]["UserId"];
    };
    requestBodies: {
        /** @description hi! */
        PostUserBackup: {
            content: {
                "application/json": components["schemas"]["PostUserBackupRequest"];
            };
        };
    };
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    GetRoot: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: components["responses"]["GetRootSuccess"];
        };
    };
    GetHealth: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: components["responses"]["GetHealthSuccess"];
        };
    };
    GetVersion: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: components["responses"]["GetVersionSuccess"];
        };
    };
    GetSchema: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: components["responses"]["GetSchemaSuccess"];
        };
    };
    GetUserBackups: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                publicKey: components["parameters"]["PublicKey"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: components["responses"]["GetUserBackupsSuccess"];
        };
    };
    PostUserBackup: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                publicKey: components["parameters"]["PublicKey"];
                userId: components["parameters"]["UserId"];
            };
            cookie?: never;
        };
        requestBody?: components["requestBodies"]["PostUserBackup"];
        responses: {
            200: components["responses"]["PostUserBackupSuccess"];
        };
    };
    DeleteUserBackup: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                publicKey: components["parameters"]["PublicKey"];
                userId: components["parameters"]["UserId"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: components["responses"]["DeleteUserBackupSuccess"];
        };
    };
}
