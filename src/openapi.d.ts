/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/version": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                200: components["responses"]["GetVersionSuccess"];
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/health": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                200: components["responses"]["GetHealthSuccess"];
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/schema": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                200: components["responses"]["GetSchemaSuccess"];
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/backups/{pubkey}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    pubkey: components["parameters"]["pubkey"];
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                200: components["responses"]["GetBackupsSuccess"];
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/backups/{pubkey}/{userId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    pubkey: components["parameters"]["pubkey"];
                    userId: components["parameters"]["userId"];
                };
                cookie?: never;
            };
            requestBody?: components["requestBodies"]["PostBackup"];
            responses: {
                200: components["responses"]["PostBackupSuccess"];
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        ByteString: string;
        Bytes32: string;
        Bytes64: string;
        Hex: string;
        UUID: string;
        GetHealthResponse: {
            message: string;
        };
        GetVersionResponse: {
            version: string;
        };
        GetSchemaResponse: string;
        PostBackupRequest: {
            signature: components["schemas"]["ByteString"];
            payload: components["schemas"]["ByteString"];
        };
        PostBackupResponse: {
            message: string;
        };
        GetBackupsResponse: components["schemas"]["GetBackupsResponseItem"][];
        GetBackupsResponseItem: {
            /** Format: date-time */
            updatedAt: string;
            userId: string;
            payload: components["schemas"]["ByteString"];
        };
    };
    responses: {
        GetVersionSuccess: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["GetVersionResponse"];
            };
        };
        GetHealthSuccess: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["GetHealthResponse"];
            };
        };
        GetSchemaSuccess: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/yaml": components["schemas"]["GetSchemaResponse"];
            };
        };
        GetBackupsSuccess: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["GetBackupsResponse"];
            };
        };
        PostBackupSuccess: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["PostBackupResponse"];
            };
        };
    };
    parameters: {
        pubkey: components["schemas"]["Bytes64"];
        userId: components["schemas"]["UUID"];
    };
    requestBodies: {
        PostBackup: {
            content: {
                "application/json": components["schemas"]["PostBackupRequest"];
            };
        };
    };
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export type operations = Record<string, never>;
